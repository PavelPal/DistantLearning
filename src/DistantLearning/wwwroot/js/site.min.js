"use strict";

var app = angular.module("distantLearning",
[
    "ngRoute",
    "LocalStorageModule",
    "ngResource",
    "ngMaterial",
    "ui.router",
    "ngCookies"
]);
app.config(routes);

function routes($stateProvider, $httpProvider, $urlRouterProvider) {

    $urlRouterProvider.otherwise('/');

    $stateProvider
        .state("main", {
            url: "/",
            templateUrl: "/home/index",
            controller: "mainController",
            abstract: true
        })
        .state("login", {
            url: "/login",
            templateUrl: "../app/account/login.html",
            controller: "loginController"
        })
        .state("signup", {
            url: "/signup",
            templateUrl: "../app/account/signup.html",
            controller: "signupController"
        })
        .state("profile", {
            url: "/profile",
            templateUrl: "../app/profile.html"
        })
        .state("users", {
            url: "/users",
            templateUrl: "../app/users.html"
        })
        .state("tests", {
            url: "/tests",
            templateUrl: "../app/tests.html"
        })
        .state("journal", {
            url: "/journal",
            templateUrl: "../app/journal.html"
        })
        .state("results", {
            url: "/results",
            templateUrl: "../app/results.html"
        })
        .state("documents", {
            url: "/documents",
            templateUrl: "../app/documents.html"
        })
        .state("settings", {
            url: "/settings",
            templateUrl: "../app/settings.html"
        })
        .state("help", {
            url: "/help",
            templateUrl: "../app/help.html"
        });

    $httpProvider.interceptors.push("authInterceptorService");
}
app.run(run).config(config);

function run($rootScope, $cookies, $window, authService) {

    $rootScope.$on("$stateChangeStart",
        function(event, toState, toParams, fromState, fromParams) {
            if (toState.external) {
                event.preventDefault();
                $window.open(toState.url, "_self");
            }
        });

    $rootScope.$on("$stateChangeSuccess",
        function(event, toState, toParams, fromState, fromParams) {
            if (toState.external) {
                event.preventDefault();
                $window.open(toState.url, "_self");
            }
        });

    authService.fillAuthData();
}

function config($provide, $mdThemingProvider) {
    $provide.decorator("$locale",
        function($delegate) {
            return $delegate;
        });

    $mdThemingProvider.theme("default")
        .primaryPalette("light-blue",
        {
            'default': "800",
            'hue-1': "100",
            'hue-2': "600",
            'hue-3': "A100"
        })
        .accentPalette("pink",
        {
            'default': "400"
        })
        .warnPalette("red");
}
app.controller("loginController", loginController);

function loginController($scope, $location, authService) {

    $scope.title = "Войти";

    $scope.loginData = {
        email: "",
        password: ""
    };

    $scope.message = "";

    $scope.login = function() {
        authService.login($scope.loginData)
            .then(function(response) {
                    $location.path("/home");
                },
                function(err) {
                    $scope.message = err.error_description;
                });
    };
};
app.controller("mainController", mainController);

function mainController($scope, $mdSidenav, $location, localStorageService, authService) {
    $scope.title = "Дистанционное обучение";

    $scope.toggleSideNav = toggleSideNav("sideNav");

    function toggleSideNav(componentId) {
        return function () {
            $mdSidenav(componentId)
                .toggle();
        };
    }

    $scope.logOut = function () {
        authService.logOut();
        $location.path("/main");
    };

    $scope.authentication = authService.authentication;
}
app.controller("searchController", searchController);

function searchController() {
}
app.controller("signupController", signupController);

function signupController($scope, $state, $element, authService) {

    $scope.title = "Зарегистрироваться";
    $scope.savedSuccessfully = false;
    $scope.message = "";
    $scope.activeLoader = false;
    $scope.searchTerm = '';

    $scope.clearSearchTerm = function () {
        $scope.searchTerm = '';
    };

    $element.find('input').on('keydown', function (e) {
        e.stopPropagation();
    });

    authService.logOut();

    $scope.registration = {
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        confirmPassword: "",
        type: 0,
        disciplines: [],
        children: [],
        group: 0
    };

    $scope.disciplines = [{
        id: 1,
        name: "Русский язык"
    }, {
        id: 2,
        name: "Математика"
    }, {
        id: 3,
        name: "Физика"
    }, {
        id: 7,
        name: "Химия"
    }];

    $scope.groups = [{
        id: 1,
        name: "9А"
    }, {
        id: 2,
        name: "8А"
    }, {
        id: 3,
        name: "7А"
    }, {
        id: 4,
        name: "6А"
    }];

    $scope.validation = {
        email: /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/
    };

    $scope.signUp = function () {
        if ($scope.signUpForm.$valid) {
            $scope.activeLoader = true;
            authService.signUp($scope.registration, function (result) {
                if (result == "OK") {
                    $scope.message = "Регистрация прошла успешно.";
                    $scope.activeLoader = false;
                    $state.go("profile");
                } else {
                    $scope.message = result;
                }
            });
        }
    };
}
app.factory("authInterceptorService", authInterceptorService);

function authInterceptorService($q, $location, localStorageService) {

    var authInterceptorServiceFactory = {};

    var request = function (config) {

        config.headers = config.headers || {};

        var authData = localStorageService.get("authorizationData");
        if (authData) {
            config.headers.Authorization = "Bearer " + authData.token;
        }

        return config;
    };

    var responseError = function (rejection) {
        if (rejection.status === 401) {
            $location.path("/login");
        }
        return $q.reject(rejection);
    };

    authInterceptorServiceFactory.request = request;
    authInterceptorServiceFactory.responseError = responseError;

    return authInterceptorServiceFactory;
}
app.factory("authService", authService);

function authService($http, $q, localStorageService) {
    var authServiceFactory = {};

    var authentication = {
        isAuth: false,
        email: "",
        emailConfirmed: false,
        userName: "",
        phoneNumber: "",
        firstName: "",
        lastName: "",
        type: ""
    };

    var logOut = function () {
        localStorageService.remove("authorizationData");

        authentication.isAuth = false;
        authentication.email = "";
        authentication.emailConfirmed = false;
        authentication.userName = "";
        authentication.phoneNumber = "";
        authentication.firstName = "";
        authentication.lastName = "";
        authentication.type = "";
    };

    var signUp = function (model, callback) {
        logOut();

        return $http({
            url: "/api/account/register",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        })
            .success(function (response) {
                localStorageService.set("authorizationData", {
                    token: response.access_token,
                    email: response.email,
                    emailConfirmed: response.emailConfirmed,
                    userName: response.userName,
                    phoneNumber: response.phoneNumber,
                    firstName: response.firstName,
                    lastName: response.lastName,
                    type: response.type
                });

                authentication.isAuth = true;
                authentication.email = response.email;
                authentication.emailConfirmed = response.emailConfirmed;
                authentication.userName = response.userName;
                authentication.phoneNumber = response.phoneNumber;
                authentication.firstName = response.firstName;
                authentication.lastName = response.lastName;
                authentication.type = response.type;

                callback("OK")
            })
            .error(function (error) {
                logOut();
                callback(error);
            });
    };

    var login = function (model, callback) {

        $http({
            url: "/api/account/login",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        })
            .success(function (response) {
                localStorageService.set("authorizationData", {
                    token: response.access_token,
                    email: response.email,
                    emailConfirmed: response.emailConfirmed,
                    userName: response.userName,
                    phoneNumber: response.phoneNumber,
                    firstName: response.firstName,
                    lastName: response.lastName,
                    type: response.type
                });

                authentication.isAuth = true;
                authentication.email = response.email;
                authentication.emailConfirmed = response.emailConfirmed;
                authentication.userName = response.userName;
                authentication.phoneNumber = response.phoneNumber;
                authentication.firstName = response.firstName;
                authentication.lastName = response.lastName;
                authentication.type = response.type;
            })
            .error(function (error) {
                logOut();
                callback(error);
            });
    };

    var fillAuthData = function () {
        var authData = localStorageService.get("authorizationData");
        if (authData) {
            authentication.isAuth = true;
            authentication.email = authData.email;
            authentication.emailConfirmed = authData.emailConfirmed;
            authentication.userName = authData.userName;
            authentication.phoneNumber = authData.phoneNumber;
            authentication.firstName = authData.firstName;
            authentication.lastName = authData.lastName;
            authentication.type = authData.type;
        }
    };

    authServiceFactory.signUp = signUp;
    authServiceFactory.login = login;
    authServiceFactory.logOut = logOut;
    authServiceFactory.fillAuthData = fillAuthData;
    authServiceFactory.authentication = authentication;

    return authServiceFactory;
}