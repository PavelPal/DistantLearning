"use strict";

var app = angular.module("distantLearning", [
    "ngRoute",
    "LocalStorageModule",
    "ngResource",
    "ngMaterial",
    "ui.router",
    "ngCookies",
    "ngProgress",
    "angularFileUpload"
]);
app.config(routes);

function routes($stateProvider, $httpProvider, $urlRouterProvider) {
    $httpProvider.interceptors.push("authInterceptorService");

    var Auth = function ($q, authService) {
        authService.fillAuthData();
        if (authService.authentication.isAuth) {
            return $q.when(authService.authentication);
        } else {
            return $q.reject({authenticated: false});
        }
    };

    $urlRouterProvider.otherwise("/");

    $stateProvider
        .state("main", {
            url: "/",
            templateUrl: "/home/index",
            controller: "mainController",
            abstract: true
        })
        .state("login", {
            url: "/login",
            templateUrl: "../app/account/login.html",
            controller: "loginController"
        })
        .state("signup", {
            url: "/signup",
            templateUrl: "../app/account/signup.html",
            controller: "signupController"
        })
        .state("profile", {
            url: "/profile/:profileId",
            templateUrl: "../app/profile.html",
            controller: "profileController",
            resolve: {
                auth: Auth
            }
        })
        .state("users", {
            url: "/users",
            templateUrl: "../app/users.html",
            controller: "userController",
            resolve: {
                auth: Auth
            }
        })
        .state("tests", {
            url: "/tests",
            templateUrl: "../app/tests.html",
            resolve: {
                auth: Auth
            }
        })
        .state("journal", {
            url: "/journal",
            templateUrl: "../app/journal.html",
            resolve: {
                auth: Auth
            }
        })
        .state("results", {
            url: "/results",
            templateUrl: "../app/results.html",
            resolve: {
                auth: Auth
            }
        })
        .state("documents", {
            url: "/documents",
            templateUrl: "../app/documents.html",
            controller: "documentController",
            resolve: {
                auth: Auth
            }
        })
        .state("settings", {
            url: "/settings",
            templateUrl: "../app/settings.html",
            resolve: {
                auth: Auth
            }
        })
        .state("help", {
            url: "/help",
            templateUrl: "../app/help.html",
            resolve: {
                auth: Auth
            }
        });
}
app.run(run).config(config);

function run($rootScope, $window, authService, ngProgressFactory) {
    $rootScope.progressbar = ngProgressFactory.createInstance();
    $rootScope.progressbar.setParent(document.getElementById('main-container'));
    $rootScope.progressbar.setAbsolute();

    $rootScope.$on("$stateChangeStart", function (event, toState) {
        $rootScope.progressbar.start();
        if (toState.external) {
            event.preventDefault();
            $window.open(toState.url, "_self");
        }
    });

    $rootScope.$on("$stateChangeSuccess", function (event, toState) {
        $rootScope.progressbar.complete();
        if (toState.external) {
            event.preventDefault();
            $window.open(toState.url, "_self");
        }
    });

    $rootScope.$on("$stateChangeError", function (event, toState) {
        $rootScope.progressbar.reset();
    });

    authService.fillAuthData();
}

function config($provide, $mdThemingProvider) {
    $provide.decorator("$locale", function ($delegate) {
        return $delegate;
    });

    $mdThemingProvider.theme("default")
        .primaryPalette("light-blue", {
            'default': "800",
            'hue-1': "100",
            'hue-2': "600",
            'hue-3': "A100"
        })
        .accentPalette("pink", {
            'default': "400"
        })
        .warnPalette("red");
}
app.controller("documentController", documentController);

function documentController($scope, documentService) {
    $scope.documeents = [];

    documentService.getDocuments(function (data) {
        $scope.documeents = data;
    });
}
app.controller("loginController", loginController);

function loginController($scope, $state, authService) {
    $scope.title = "Войти";
    $scope.message = "";
    $scope.activeLoader = false;

    authService.logOut();

    $scope.loginData = {
        email: "",
        password: ""
    };

    $scope.login = function () {
        if ($scope.loginForm.$valid) {
            $scope.activeLoader = true;
            authService.login($scope.loginData,
                function (result) {
                    if (result == "OK") {
                        $scope.message = "Вход прошел успешно.";
                        $scope.activeLoader = false;
                        $state.go("profile", {profileId: null});
                    } else {
                        $scope.message = result;
                        $scope.activeLoader = false;
                    }
                });
        }
    };

    document.querySelector('#ngProgress-container').style.top = 0;
}
app.controller("mainController", mainController);

function mainController($scope, $mdSidenav, $state, authService) {
    $scope.title = "Дистанционное обучение";
    $scope.toggleSideNav = toggleSideNav("sideNav");

    function toggleSideNav() {
        return function () {
            $mdSidenav('sideNav')
                .toggle();
        };
    }

    $scope.close = function () {
        $mdSidenav('sideNav').close();
    };

    $scope.logOut = function () {
        $mdSidenav('sideNav').close();
        authService.logOut();
        $state.go("login");
    };

    $scope.authentication = authService.authentication;
    console.log($scope.authentication);

    $scope.$on("$stateChangeError", function () {
        $state.go("login");
    });
}
app.controller("profileController", profileController);

function profileController($scope, $stateParams, profileService, consultationService, FileUploader, $mdToast) {
    $scope.profile = {};
    $scope.consultations = [];
    $scope.image = null;

    var profileId = $stateParams.profileId;

    profileService.getProfile(profileId, function (data) {
        if (data != "Пользователь не найден.") {
            $scope.profile = data;
            consultationService.getConsultations($scope.profile.id, function (data) {
                $scope.consultations = data;
            });
        } else {
            $mdToast.show($mdToast.simple().textContent(data).position('bottom right').hideDelay(3000));
        }
    });

    $scope.dayOfWeekAsString = function (index) {
        return ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"][index];
    };

    $scope.getTime = function (timeString) {
        var timeTokens = timeString.split(':');
        return new Date(1970, 0, 1, timeTokens[0], timeTokens[1], timeTokens[2]);
    };

    $scope.add = function () {
        var image = $scope.uploader.queue[0]._file;
        profileService.uploadImage(image, function (data) {
            console.log(data);
        });
    };

    $scope.uploader = new FileUploader();

    document.querySelector('#ngProgress-container').style.top = 48 + 'px';
}
app.controller("searchController", searchController);

function searchController() {
}
app.controller("signupController", signupController);

function signupController($scope, $state, $element, authService, disciplineService, groupService) {
    $scope.title = "Зарегистрироваться";
    $scope.savedSuccessfully = false;
    $scope.message = "";
    $scope.activeLoader = false;
    $scope.searchTerm = "";
    $scope.disciplines = [];
    $scope.groups = [];

    groupService.getGroups(function (data) {
        $scope.groups = data;
    });

    disciplineService.getDisciplines(function (data) {
        $scope.disciplines = data;
    });

    $scope.clearSearchTerm = function () {
        $scope.searchTerm = "";
    };

    $element.find("input").on("keydown",
        function (e) {
            e.stopPropagation();
        });

    $scope.registration = {
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        confirmPassword: "",
        type: 0,
        disciplines: [],
        children: [],
        group: 0
    };

    $scope.validation = {
        email: /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/
    };

    $scope.signUp = function () {
        if ($scope.signUpForm.$valid) {
            $scope.activeLoader = true;
            authService.signUp($scope.registration,
                function (result) {
                    if (result == "OK") {
                        $scope.message = "Регистрация прошла успешно.";
                        $scope.activeLoader = false;
                        $state.go("profile", {profileId: null});
                    } else {
                        $scope.message = result;
                        $scope.activeLoader = false;
                    }
                });
        }
    };

    document.querySelector('#ngProgress-container').style.top = 0;
}
app.controller("userController", userController);

function userController($scope, userService, ngProgressFactory) {
    $scope.progressbar = ngProgressFactory.createInstance();
    $scope.progressbar.setParent(document.querySelector('.search-input-block'));
    $scope.progressbar.setAbsolute();
    $scope.progressbar.start();

    $scope.users = [];

    $scope.searchParams = {
        searchString: null,
        skip: 0,
        take: 20
    };

    userService.getUsers($scope.searchParams, function (data) {
        $scope.users = data;
        $scope.progressbar.complete();
    });

    $scope.getRole = function (role) {
        switch (role) {
            case "Admin":
                return "администратор";
            case "Teacher":
                return "учитель";
            case "Student":
                return "ученик";
            case "Parent":
                return "родитель";
            case "Moderator":
                return "модератор";
        }
    };

    $scope.$watch("searchParams.searchString", function () {
        $scope.progressbar.start();
        userService.getUsers($scope.searchParams, function (data) {
            $scope.users = data;
            $scope.progressbar.complete();
        });
    });
}
app.factory("authInterceptorService", authInterceptorService);

function authInterceptorService($q, $location, localStorageService) {
    var authInterceptorServiceFactory = {};
    var request = function (config) {

        config.headers = config.headers || {};

        var authData = localStorageService.get("authorizationData");
        if (authData) {
            config.headers.Authorization = "Bearer " + authData.token;
        }

        return config;
    };

    var responseError = function (rejection) {
        if (rejection.status === 401) {
            $location.path("/");
        }
        return $q.reject(rejection);
    };

    authInterceptorServiceFactory.request = request;
    authInterceptorServiceFactory.responseError = responseError;

    return authInterceptorServiceFactory;
}
app.factory("authService", authService);

function authService($http, $cookies, localStorageService) {
    var authServiceFactory = {};

    var authentication = {
        id: "",
        isAuth: false,
        email: "",
        roles: []
    };

    var logOutFromServer = function () {
        return $http({
            url: "/api/account/logout",
            method: "POST"
        })
            .success(function () {
            })
            .error(function (error) {
            });
    };

    var logOut = function () {
        localStorageService.remove("authorizationData");
        if (authentication.isAuth)
            logOutFromServer();
        authentication.isAuth = false;
        authentication.id = "";
        authentication.email = "";
        authentication.roles = [];
    };

    var signUp = function (model, callback) {
        logOut();
        return $http({
            url: "/api/account/register",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        })
            .success(function (response) {
                $cookies.put("access_token", response.email);
                localStorageService.set("authorizationData", {
                    token: response.access_token,
                    email: response.email,
                    roles: response.roles
                });
                authentication.isAuth = true;
                authentication.id = response.id;
                authentication.email = response.email;
                authentication.roles = response.roles;
                callback("OK");
            })
            .error(function (error) {
                logOut();
                callback(error);
            });
    };

    var login = function (model, callback) {
        logOut();
        $http({
            url: "/api/account/login",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        })
            .success(function (response) {
                $cookies.put("access_token", response.email);
                localStorageService.set("authorizationData", {
                    token: response.access_token,
                    id: response.id,
                    email: response.email,
                    roles: response.roles
                });
                authentication.isAuth = true;
                authentication.id = response.id;
                authentication.email = response.email;
                authentication.roles = response.roles;
                callback("OK");
            })
            .error(function (error) {
                logOut();
                callback(error);
            });
    };

    var fillAuthData = function () {
        var authData = localStorageService.get("authorizationData");
        var authCookie = $cookies.get("access_token");
        if (authData && authCookie) {
            authentication.isAuth = true;
            authentication.id = authData.id;
            authentication.email = authData.email;
            authentication.roles = authData.roles;
        }
    };

    authServiceFactory.signUp = signUp;
    authServiceFactory.login = login;
    authServiceFactory.logOut = logOut;
    authServiceFactory.fillAuthData = fillAuthData;
    authServiceFactory.authentication = authentication;

    return authServiceFactory;
}
app.factory("consultationService", consultationService);

function consultationService($http) {
    return {
        getConsultations: function (teacherId, callback) {
            $http.get("/api/consultation/byTeacher/" + teacherId)
                .success(function (data) {
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting consultations from the server");
                });
        }
    };
}
app.factory("disciplineService", disciplineService);

function disciplineService($http) {
    var disciplines = [];
    return {
        getDisciplines: function (callback) {
            $http.get("/api/discipline")
                .success(function (data) {
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting disciplines from the server");
                });
        }
    };
}
app.factory("documentService", documentService);

function documentService($http) {
    var documents = [];
    return {
        getDocuments: function (callback) {
            $http.get("/api/document")
                .success(function (data) {
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting documents from the server");
                });
        }
    };
}
app.factory("groupService", groupService);

function groupService($http) {
    var groups = [];
    return {
        getGroups: function (callback) {
            $http.get("/api/group")
                .success(function (data) {
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting groups from the server");
                });
        }
    };
}
app.factory("profileService", profileService);

function profileService($http) {
    return {
        getProfile: function (profileId, callback) {
            $http.get("/api/profile/" + profileId)
                .success(function (data) {
                    callback(data);
                })
                .error(function (data) {
                    console.error("Problem with getting profile data from the server");
                });
        },
        uploadImage: function (image, callback) {
            $http({
                url: "/api/image/uploadProfileImage",
                method: "POST",
                data: image,
                headers: {'Content-Type': 'application/x-www-form-urlencoded'}
            })
                .success(function (data) {
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting profile data from the server");
                });
        }
    };
}
app.factory("userService", userService);

function userService($http) {
    var users = [];
    return {
        getUsers: function (searchParams, callback) {
            $http({
                url: "/api/user",
                method: "GET",
                params: {
                    searchString: searchParams.searchString,
                    skip: searchParams.skip,
                    take: searchParams.take
                }
            })
                .success(function (data) {
                    users = data;
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting users from the server");
                });
        }
    };
}