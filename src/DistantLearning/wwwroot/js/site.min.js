"use strict";

var app = angular.module("distantLearning",
[
    "ngRoute",
    "LocalStorageModule",
    "ngResource",
    "ngMaterial",
    "ui.router",
    "ngCookies"
]);
app.config(routes);

function routes($stateProvider, $httpProvider, $urlRouterProvider) {

    var Auth = function($q, authService) {
        authService.fillAuthData();
        if (authService.authentication.isAuth) {
            return $q.when(authService.authentication);
        } else {
            return $q.reject({ authenticated: false });
        }
    };

    $urlRouterProvider.otherwise("/");

    $stateProvider
        .state("main",
        {
            url: "/",
            templateUrl: "/home/index",
            controller: "mainController",
            abstract: true
        })
        .state("login",
        {
            url: "/login",
            templateUrl: "../app/account/login.html",
            controller: "loginController"
        })
        .state("signup",
        {
            url: "/signup",
            templateUrl: "../app/account/signup.html",
            controller: "signupController"
        })
        .state("profile",
        {
            url: "/profile",
            templateUrl: "../app/profile.html",
            resolve: {
                auth: Auth
            }
        })
        .state("users",
        {
            url: "/users",
            templateUrl: "../app/users.html",
            resolve: {
                auth: Auth
            }
        })
        .state("tests",
        {
            url: "/tests",
            templateUrl: "../app/tests.html",
            resolve: {
                auth: Auth
            }
        })
        .state("journal",
        {
            url: "/journal",
            templateUrl: "../app/journal.html",
            resolve: {
                auth: Auth
            }
        })
        .state("results",
        {
            url: "/results",
            templateUrl: "../app/results.html",
            resolve: {
                auth: Auth
            }
        })
        .state("documents",
        {
            url: "/documents",
            templateUrl: "../app/documents.html",
            controller: "documentController",
            resolve: {
                auth: Auth
            }
        })
        .state("settings",
        {
            url: "/settings",
            templateUrl: "../app/settings.html",
            resolve: {
                auth: Auth
            }
        })
        .state("help",
        {
            url: "/help",
            templateUrl: "../app/help.html",
            resolve: {
                auth: Auth
            }
        });

    $httpProvider.interceptors.push("authInterceptorService");
}
app.run(run).config(config);

function run($rootScope, $window, authService) {

    $rootScope.$on("$stateChangeStart",
        function(event, toState) {
            if (toState.external) {
                event.preventDefault();
                $window.open(toState.url, "_self");
            }
        });

    $rootScope.$on("$stateChangeSuccess",
        function(event, toState) {
            if (toState.external) {
                event.preventDefault();
                $window.open(toState.url, "_self");
            }
        });

    authService.fillAuthData();
}

function config($provide, $mdThemingProvider) {
    $provide.decorator("$locale",
        function($delegate) {
            return $delegate;
        });

    $mdThemingProvider.theme("default")
        .primaryPalette("light-blue",
        {
            'default': "800",
            'hue-1': "100",
            'hue-2': "600",
            'hue-3': "A100"
        })
        .accentPalette("pink",
        {
            'default': "400"
        })
        .warnPalette("red");
}
app.controller("documentController", documentController);

function documentController($scope, documentService) {

    $scope.documeents = [];

    documentService.getDocuments(function(data) {
        $scope.documeents = data;
    });
}
app.controller("loginController", loginController);

function loginController($scope, $state, authService) {

    $scope.title = "Войти";
    $scope.message = "";
    $scope.activeLoader = false;

    authService.logOut();

    $scope.loginData = {
        email: "",
        password: ""
    };

    $scope.login = function() {
        if ($scope.loginForm.$valid) {
            $scope.activeLoader = true;
            authService.login($scope.loginData,
                function(result) {
                    if (result == "OK") {
                        $scope.message = "Вход прошел успешно.";
                        $scope.activeLoader = false;
                        $state.go("profile");
                    } else {
                        $scope.message = result;
                    }
                });
        }
    };
}
app.controller("mainController", mainController);

function mainController($scope, $mdSidenav, $state, authService) {
    $scope.title = "Дистанционное обучение";

    $scope.toggleSideNav = toggleSideNav("sideNav");

    function toggleSideNav() {
        return function () {
            $mdSidenav('sideNav')
                .toggle();
        };
    }

    $scope.logOut = function () {
        $mdSidenav('sideNav').close();
        authService.logOut();
        $state.go("login");
    };

    $scope.authentication = authService.authentication;

    $scope.$on("$stateChangeError",
        function () {
            $state.go("login");
        });
}
app.controller("searchController", searchController);

function searchController() {
}
app.controller("signupController", signupController);

function signupController($scope, $state, $element, authService, disciplineService, groupService) {

    $scope.title = "Зарегистрироваться";
    $scope.savedSuccessfully = false;
    $scope.message = "";
    $scope.activeLoader = false;
    $scope.searchTerm = "";
    $scope.disciplines = [];
    $scope.groups = [];

    groupService.getGroups(function (data) {
        $scope.groups = data;
    });

    disciplineService.getDisciplines(function (data) {
        $scope.disciplines = data;
    });

    $scope.clearSearchTerm = function () {
        $scope.searchTerm = "";
    };

    $element.find("input")
        .on("keydown",
            function (e) {
                e.stopPropagation();
            });

    authService.logOut();

    $scope.registration = {
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        confirmPassword: "",
        type: 0,
        disciplines: [],
        children: [],
        group: 0
    };

    $scope.validation = {
        email: /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/
    };

    $scope.signUp = function () {
        if ($scope.signUpForm.$valid) {
            $scope.activeLoader = true;
            authService.signUp($scope.registration,
                function (result) {
                    if (result == "OK") {
                        $scope.message = "Регистрация прошла успешно.";
                        $scope.activeLoader = false;
                        $state.go("profile");
                    } else {
                        $scope.message = result;
                    }
                });
        }
    };
}
app.factory("authInterceptorService", authInterceptorService);

function authInterceptorService($q, $location, localStorageService) {

    var authInterceptorServiceFactory = {};

    var request = function(config) {

        config.headers = config.headers || {};

        var authData = localStorageService.get("authorizationData");
        if (authData) {
            config.headers.Authorization = "Bearer " + authData.token;
        }

        return config;
    };

    var responseError = function(rejection) {
        if (rejection.status === 401) {
            $location.state("login");
        }
        return $q.reject(rejection);
    };

    authInterceptorServiceFactory.request = request;
    authInterceptorServiceFactory.responseError = responseError;

    return authInterceptorServiceFactory;
}
app.factory("authService", authService);

function authService($http, localStorageService) {
    var authServiceFactory = {};

    var authentication = {
        isAuth: false,
        email: "",
        emailConfirmed: false,
        userName: "",
        phoneNumber: "",
        firstName: "",
        lastName: "",
        type: ""
    };

    var logOut = function () {
        localStorageService.remove("authorizationData");

        if (authentication.isAuth) {
            logOutFromServer();
        }

        authentication.isAuth = false;
        authentication.email = "";
        authentication.emailConfirmed = false;
        authentication.userName = "";
        authentication.phoneNumber = "";
        authentication.firstName = "";
        authentication.lastName = "";
        authentication.type = "";
    };

    var logOutFromServer = function () {
        return $http({
            url: "/api/account/logout",
            method: "POST"
        })
            .success(function () {
            })
            .error(function (error) {
            });
    };

    var signUp = function (model, callback) {
        logOut();

        return $http({
            url: "/api/account/register",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        })
            .success(function (response) {
                localStorageService.set("authorizationData",
                    {
                        token: response.access_token,
                        email: response.email,
                        emailConfirmed: response.emailConfirmed,
                        userName: response.userName,
                        phoneNumber: response.phoneNumber,
                        firstName: response.firstName,
                        lastName: response.lastName,
                        type: response.type
                    });

                authentication.isAuth = true;
                authentication.email = response.email;
                authentication.emailConfirmed = response.emailConfirmed;
                authentication.userName = response.userName;
                authentication.phoneNumber = response.phoneNumber;
                authentication.firstName = response.firstName;
                authentication.lastName = response.lastName;
                authentication.type = response.type;

                callback("OK");
            })
            .error(function (error) {
                logOut();
                callback(error);
            });
    };

    var login = function (model, callback) {
        logOut();

        $http({
            url: "/api/account/login",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        })
            .success(function (response) {

                localStorageService.set("authorizationData",
                    {
                        token: response.access_token,
                        email: response.email,
                        emailConfirmed: response.emailConfirmed,
                        userName: response.userName,
                        phoneNumber: response.phoneNumber,
                        firstName: response.firstName,
                        lastName: response.lastName,
                        type: response.type
                    });

                authentication.isAuth = true;
                authentication.email = response.email;
                authentication.emailConfirmed = response.emailConfirmed;
                authentication.userName = response.userName;
                authentication.phoneNumber = response.phoneNumber;
                authentication.firstName = response.firstName;
                authentication.lastName = response.lastName;
                authentication.type = response.type;

                callback("OK");
            })
            .error(function (error) {
                logOut();
                callback(error);
            });
    };

    var fillAuthData = function () {
        var authData = localStorageService.get("authorizationData");
        if (authData) {
            authentication.isAuth = true;
            authentication.email = authData.email;
            authentication.emailConfirmed = authData.emailConfirmed;
            authentication.userName = authData.userName;
            authentication.phoneNumber = authData.phoneNumber;
            authentication.firstName = authData.firstName;
            authentication.lastName = authData.lastName;
            authentication.type = authData.type;
        }
    };

    authServiceFactory.signUp = signUp;
    authServiceFactory.login = login;
    authServiceFactory.logOut = logOut;
    authServiceFactory.fillAuthData = fillAuthData;
    authServiceFactory.authentication = authentication;

    return authServiceFactory;
}
app.factory("disciplineService", disciplineService);

function disciplineService($http) {
    var disciplines = [];
    return {
        getDisciplines: function (callback) {
            $http.get("/api/discipline")
                .success(function (data) {
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting disciplines from the server");
                });
        }
    };
}
app.factory("documentService", documentService);

function documentService($http) {
    var documents = [];
    return {
        getDocuments: function (callback) {
            $http.get("/api/document")
                .success(function (data) {
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting documents from the server");
                });
        }
    };
}
app.factory("groupService", groupService);

function groupService($http) {
    var groups = [];
    return {
        getGroups: function (callback) {
            $http.get("/api/group")
                .success(function (data) {
                    callback(data);
                })
                .error(function () {
                    console.error("Problem with getting groups from the server");
                });
        }
    };
}
app.factory("profileService", profileService);

function profileService($http) {
}