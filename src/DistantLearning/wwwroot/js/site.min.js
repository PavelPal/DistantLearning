"use strict";

var app = angular.module("distantLearning", [
    "ngRoute",
    "LocalStorageModule",
    "ngResource",
    "ngMaterial",
    "ui.router",
    "ngCookies",
    "ngProgress",
    "angularFileUpload",
    "infinite-scroll"
]);
app.config(routes);

function routes($stateProvider, $httpProvider, $urlRouterProvider) {
    $httpProvider.interceptors.push("authInterceptorService");

    var auth = function ($q, authService) {
        authService.fillAuthData();
        if (authService.authentication.isAuth) {
            return $q.when(authService.authentication);
        } else {
            return $q.reject({authenticated: false});
        }
    };

    $urlRouterProvider.otherwise("/");

    $stateProvider
        .state("main", {
            url: "/",
            templateUrl: "/home/index",
            controller: "mainController",
            abstract: true
        })
        .state("login", {
            url: "/login",
            templateUrl: "../app/account/login.html",
            controller: "loginController"
        })
        .state("signup", {
            url: "/signup",
            templateUrl: "../app/account/signup.html",
            controller: "signupController"
        })
        .state("profile", {
            url: "/profile/:profileId",
            templateUrl: "../app/profile.html",
            controller: "profileController",
            resolve: {
                auth: auth
            }
        })
        .state("users", {
            url: "/users",
            templateUrl: "../app/users.html",
            controller: "userController",
            resolve: {
                auth: auth
            }
        })
        .state("tests", {
            url: "/tests",
            templateUrl: "../app/tests.html",
            resolve: {
                auth: auth
            }
        })
        .state("journal", {
            url: "/journal",
            templateUrl: "../app/journal.html",
            resolve: {
                auth: auth
            }
        })
        .state("results", {
            url: "/results",
            templateUrl: "../app/results.html",
            resolve: {
                auth: auth
            }
        })
        .state("documents", {
            url: "/documents",
            templateUrl: "../app/documents.html",
            controller: "documentController",
            resolve: {
                auth: auth
            }
        })
        .state("settings", {
            url: "/settings",
            templateUrl: "../app/settings.html",
            resolve: {
                auth: auth
            }
        })
        .state("help", {
            url: "/help",
            templateUrl: "../app/help.html",
            resolve: {
                auth: auth
            }
        })
        .state("admin", {
            url: "/admin",
            templateUrl: "../app/admin.html",
            controller: "adminController",
            resolve: {
                auth: auth
            }
        });
}
app.run(run).config(config);

function run($rootScope, $window, $state, authService, ngProgressFactory) {
    $rootScope.progressbar = ngProgressFactory.createInstance();
    $rootScope.progressbar.setParent(document.getElementById('main-container'));
    $rootScope.progressbar.setAbsolute();

    $rootScope.$on("$stateChangeStart", function (event, toState) {
        $rootScope.progressbar.start();
        authService.fillAuthData();
        if (toState.name == "admin") {
            var isAdmin = false;
            angular.forEach(authService.authentication.roles, function (role) {
                if (role == "Admin")
                    isAdmin = true;
            });
            if (!isAdmin) {
                event.preventDefault();
                $state.go("profile", {profileId: authService.authentication.id});
            }
        }
        if (toState.external) {
            event.preventDefault();
            $window.open(toState.url, "_self");
        }
    });

    $rootScope.$on("$stateChangeSuccess", function (event, toState) {
        $rootScope.progressbar.complete();
        if (toState.external) {
            event.preventDefault();
            $window.open(toState.url, "_self");
        }
    });

    $rootScope.$on("$stateChangeError", function () {
        $rootScope.progressbar.reset();
    });

    authService.fillAuthData();
}

function config($provide, $mdThemingProvider) {
    $provide.decorator("$locale", function ($delegate) {
        return $delegate;
    });

    $mdThemingProvider.theme("default")
        .primaryPalette("light-blue", {
            'default': "800",
            'hue-1': "100",
            'hue-2': "600",
            'hue-3': "A100"
        })
        .accentPalette("pink", {
            'default': "400"
        })
        .warnPalette("red");
}
app.controller("adminController", adminController);

function adminController($scope, $mdDialog, $mdToast, disciplineService, groupService) {
    $scope.groups = [];
    $scope.disciplines = [];

    $scope.isLoadingGroups = true;
    $scope.isLoadingDisciplines = true;

    disciplineService.getDisciplines(function (data) {
        $scope.disciplines = data;
        $scope.isLoadingDisciplines = false;
    });

    groupService.getGroups(function (data) {
        $scope.groups = data;
        $scope.isLoadingGroups = false;
    });

    // todo change model view

    $scope.createGroupModal = function (ev) {
        var confirm = $mdDialog.prompt()
            .title('Создание новой группы')
            .textContent('Введите название группы.')
            .placeholder('Название')
            .ariaLabel('Название')
            .targetEvent(ev)
            .ok('Создать')
            .cancel('Отмена');

        $mdDialog.show(confirm).then(function (result) {
            groupService.createGroup(result, function (data) {
                if (data == "Created") {
                    $scope.groups.push({
                        id: 0,
                        name: result
                    });
                    $mdToast.show($mdToast.simple().textContent("Группа успешно создана").position('bottom right').hideDelay(3000));
                } else {
                    $mdToast.show($mdToast.simple().textContent("Некорректные данные").position('bottom right').hideDelay(3000));
                }
            });
        }, function () {
            $mdToast.show($mdToast.simple().textContent("Операция была отменена").position('bottom right').hideDelay(3000));
        });
    };

    // todo change model view

    $scope.createDisciplineModal = function (ev) {
        var confirm = $mdDialog.prompt()
            .title('Создание новой дисциплины')
            .textContent('Введите название дисциплины.')
            .placeholder('Название')
            .ariaLabel('Название')
            .targetEvent(ev)
            .ok('Создать')
            .cancel('Отмена');

        $mdDialog.show(confirm).then(function (result) {
            disciplineService.createDiscipline(result, function (data) {
                if (data == "Created") {
                    $scope.disciplines.push({
                        id: 0,
                        name: result
                    });
                    $mdToast.show($mdToast.simple().textContent("Дисциплина успешно создана").position('bottom right').hideDelay(3000));
                } else {
                    $mdToast.show($mdToast.simple().textContent("Некорректные данные").position('bottom right').hideDelay(3000));
                }
            });
        }, function () {
            $mdToast.show($mdToast.simple().textContent("Операция была отменена").position('bottom right').hideDelay(3000));
        });
    };
}
app.controller("documentController", documentController);

function documentController($scope, documentService, ngProgressFactory) {
    $scope.progressbar = ngProgressFactory.createInstance();
    $scope.progressbar.setParent(document.querySelector('.search-input-block'));
    $scope.progressbar.setAbsolute();
    $scope.progressbar.start();

    $scope.documents = [];
    $scope.isLoading = true;
    $scope.canGetElements = true;
    $scope.searchParams = {
        searchString: null,
        skip: 0,
        take: 20
    };

    documentService.getDocuments($scope.searchParams, function (data) {
        $scope.documents = data;
        $scope.isLoading = false;
        $scope.progressbar.complete();
    });

    $scope.findDocuments = function () {
        if ($scope.isLoading)
            return;
        $scope.isLoading = true;
        $scope.progressbar.start();
        $scope.searchParams.skip = 0;
        documentService.getDocuments($scope.searchParams, function (data) {
            $scope.documents = data;
            $scope.isLoading = false;
            $scope.progressbar.complete();
        });
    };

    $scope.getMoreDocuments = function () {
        if ($scope.isLoading) return;
        $scope.isLoading = true;
        $scope.progressbar.start();
        $scope.searchParams.skip += $scope.searchParams.take;
        if ($scope.canGetElements) {
            documentService.getDocuments($scope.searchParams, function (data) {
                if (data.length < 20) $scope.canGetElements = false;
                angular.forEach(data, function (element) {
                    $scope.documents.push(element);
                });
                $scope.progressbar.complete();
            });
        }
        $scope.isLoading = false;
    }
}
app.controller("loginController", loginController);

function loginController($scope, $state, $mdToast, authService) {
    document.querySelector('#ngProgress-container').style.top = 0;

    $scope.title = "Войти";
    $scope.activeLoader = false;

    authService.logOut();

    $scope.loginData = {
        email: "",
        password: ""
    };

    $scope.login = function () {
        if ($scope.loginForm.$valid) {
            $scope.activeLoader = true;
            authService.login($scope.loginData,
                function (result) {
                    if (result == "OK") {
                        $scope.message = "Вход прошел успешно.";
                        $scope.activeLoader = false;
                        $state.go("profile", {profileId: authService.authentication.id});
                    } else {
                        $mdToast.show($mdToast.simple().textContent(result).position('bottom right').hideDelay(3000));
                        $scope.activeLoader = false;
                    }
                });
        }
    };
}
app.controller("mainController", mainController);

function mainController($scope, $mdSidenav, $state, authService) {
    $scope.title = "Дистанционное обучение";
    $scope.toggleSideNav = toggleSideNav("sideNav");

    function toggleSideNav() {
        return function () {
            $mdSidenav('sideNav')
                .toggle();
        };
    }

    $scope.close = function () {
        $mdSidenav('sideNav').close();
    };

    $scope.logOut = function () {
        $mdSidenav('sideNav').close();
        authService.logOut();
        $state.go("login");
    };

    $scope.authentication = authService.authentication;

    $scope.isAdmin = function () {
        var isAdmin = false;
        angular.forEach($scope.authentication.roles, function (role) {
            if (role == "Admin")
                isAdmin = true;
        });
        return isAdmin;
    };

    $scope.$on("$stateChangeError", function () {
        $state.go("login");
    });
}
app.controller("profileController", profileController);

function profileController($scope, $state, $stateParams, $mdToast, $mdDialog, profileService, consultationService, documentService, authService, groupService, disciplineService) {
    document.querySelector('#ngProgress-container').style.top = 48 + 'px';

    $scope.profile = {};
    $scope.group = '';
    $scope.disciplines = [];
    $scope.consultations = [];
    $scope.documents = [];
    $scope.image = null;
    $scope.documentsLoader = false;
    $scope.consultationsLoader = false;

    var profileId = $stateParams.profileId;

    profileService.getProfile(profileId, function (data) {
        if (data != "Not found") {
            $scope.profile = data;
            $scope.image = data.photo == null ? null : "data/profile_photos/" + data.photo;
            if ($scope.isTeacher()) {
                disciplineService.getTeachersDisciplines(profileId, function (data) {
                    $scope.disciplines = data;
                });
                $scope.documentsLoader = $scope.consultationsLoader = true;
                consultationService.getConsultationsByTeacher($scope.profile.id, function (data) {
                    $scope.consultations = data;
                    $scope.consultationsLoader = false;
                });
                documentService.getDocumentsByTeacher($scope.profile.id, function (data) {
                    $scope.documents = data;
                    $scope.documentsLoader = false;
                });
            } else if ($scope.isStudent()) {
                groupService.getStudentsGroup(profileId, function (data) {
                    $scope.group = data.prefix + data.postfix;
                })
            }
        } else {
            $state.go("users");
            $mdToast.show($mdToast.simple().textContent("Пользователь не найден").position('bottom right').hideDelay(3000));
        }
    });

    // todo move to authService.js

    $scope.isTeacher = function () {
        var isTeacher = false;
        angular.forEach($scope.profile.roles, function (role) {
            if (role == "Teacher") {
                isTeacher = true;
            }
        });
        return isTeacher;
    };

    // todo move to authService.js

    $scope.isStudent = function () {
        var isStudent = false;
        angular.forEach($scope.profile.roles, function (role) {
            if (role == "Student") {
                isStudent = true;
            }
        });
        return isStudent;
    };

    // todo move to authService.js

    $scope.isParent = function () {
        var isParent = false;
        angular.forEach($scope.profile.roles, function (role) {
            if (role == "Parent") {
                isParent = true;
            }
        });
        return isParent;
    };

    $scope.isCurrent = function () {
        var currentProfileId = authService.authentication.id;
        return profileId == currentProfileId || profileId == "";
    };

    $scope.dayOfWeekAsString = function (index) {
        return ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"][index];
    };

    $scope.getTime = function (timeString) {
        var timeTokens = timeString.split(':');
        return new Date(1970, 0, 1, timeTokens[0], timeTokens[1], timeTokens[2]);
    };

    $scope.getRole = function (role) {
        switch (role) {
            case "Admin":
                return "администратор";
            case "Teacher":
                return "учитель";
            case "Student":
                return "ученик";
            case "Parent":
                return "родитель";
            case "Moderator":
                return "модератор";
        }
    };

    $scope.showProfileImageModal = function (ev) {
        if (!$scope.isCurrent) return;
        $mdDialog.show({
            controller: 'ProfileImageLoaderController',
            templateUrl: '../app/partials/profileImageLoaderView.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: false,
            fullscreen: false
        }).then(
            function (response) {
                $scope.image = response;
            },
            function (response) {
            });
    };

    $scope.showDocumentUploadingModal = function (ev) {
        if (!$scope.isTeacher) return;
        $mdDialog.show({
            controller: 'DocumentLoaderController',
            templateUrl: '../app/partials/documentUploadingView.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: false,
            fullscreen: false
        }).then(
            function (response) {
                $scope.documents.unshift({
                    id: 0,
                    name: response.name,
                    date: Date.now(),
                    isLocked: false
                });
            },
            function (response) {
            });
    };
}
app.controller("searchController", searchController);

function searchController() {
}
app.controller("signupController", signupController);

function signupController($scope, $state, $element, authService, disciplineService, groupService) {
    document.querySelector('#ngProgress-container').style.top = 0;

    $scope.title = "Зарегистрироваться";
    $scope.savedSuccessfully = false;
    $scope.message = "";
    $scope.activeLoader = false;
    $scope.searchTerm = "";
    $scope.disciplines = [];
    $scope.groups = [];

    groupService.getGroups(function (data) {
        $scope.groups = data;
    });

    disciplineService.getDisciplines(function (data) {
        $scope.disciplines = data;
    });

    $scope.clearSearchTerm = function () {
        $scope.searchTerm = "";
    };

    $element.find("input").on("keydown", function (e) {
        e.stopPropagation();
    });

    $scope.registration = {
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        confirmPassword: "",
        type: 0,
        disciplines: [],
        children: [],
        group: 0
    };

    $scope.validation = {
        email: /^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/
    };

    $scope.signUp = function () {
        if ($scope.signUpForm.$valid) {
            $scope.activeLoader = true;
            authService.signUp($scope.registration,
                function (result) {
                    if (result == "OK") {
                        $scope.message = "Регистрация прошла успешно.";
                        $scope.activeLoader = false;
                        $state.go("profile", {profileId: authService.authentication.id});
                    } else {
                        $mdToast.show($mdToast.simple().textContent(result).position('bottom right').hideDelay(3000));
                        $scope.activeLoader = false;
                    }
                });
        }
    };
}
app.controller("userController", userController);

function userController($scope, userService, ngProgressFactory) {
    $scope.progressbar = ngProgressFactory.createInstance();
    $scope.progressbar.setParent(document.querySelector('.search-input-block'));
    $scope.progressbar.setAbsolute();
    $scope.progressbar.start();
    $scope.users = [];
    $scope.isLoading = true;
    $scope.canGetElements = true;
    $scope.searchParams = {
        searchString: null,
        skip: 0,
        take: 20
    };

    userService.getUsers($scope.searchParams, function (data) {
        $scope.users = data;
        $scope.isLoading = false;
        $scope.progressbar.complete();
    });

    $scope.getRole = function (role) {
        switch (role) {
            case "Admin":
                return "администратор";
            case "Teacher":
                return "учитель";
            case "Student":
                return "ученик";
            case "Parent":
                return "родитель";
            case "Moderator":
                return "модератор";
        }
    };

    $scope.findUsers = function () {
        if ($scope.isLoading)
            return;
        $scope.isLoading = true;
        $scope.progressbar.start();
        $scope.searchParams.skip = 0;
        userService.getUsers($scope.searchParams, function (data) {
            $scope.users = data;
            $scope.isLoading = false;
            $scope.progressbar.complete();
        });
    };

    $scope.getMoreUsers = function () {
        if ($scope.isLoading) return;
        $scope.isLoading = true;
        $scope.progressbar.start();
        $scope.searchParams.skip += $scope.searchParams.take;
        if ($scope.canGetElements) {
            userService.getUsers($scope.searchParams, function (data) {
                if (data.length < 20) $scope.canGetElements = false;
                angular.forEach(data, function (element) {
                    $scope.users.push(element);
                });
                $scope.progressbar.complete();
            });
        }
        $scope.isLoading = false;
    }
}
app.factory("authInterceptorService", authInterceptorService);

function authInterceptorService($q, $location, localStorageService) {
    var authInterceptorServiceFactory = {};
    var request = function (config) {
        config.headers = config.headers || {};
        var authData = localStorageService.get("authorizationData");
        if (authData) {
            config.headers.Authorization = "Bearer " + authData.token;
        }
        return config;
    };

    var responseError = function (rejection) {
        if (rejection.status == 401) {
            $location.path("/");
        }
        return $q.reject(rejection);
    };

    authInterceptorServiceFactory.request = request;
    authInterceptorServiceFactory.responseError = responseError;

    return authInterceptorServiceFactory;
}
app.factory("authService", authService);

function authService($http, $cookies, localStorageService) {
    var authServiceFactory = {};

    var authentication = {
        id: "",
        isAuth: false,
        email: "",
        roles: []
    };

    var logOutFromServer = function () {
        return $http({
            url: "/api/account/logout",
            method: "POST"
        }).then(
            function successCallback(response) {
            }, function errorCallback(response) {
            }
        );
    };

    var logOut = function () {
        localStorageService.remove("authorizationData");
        if (authentication.isAuth)
            logOutFromServer();
        authentication.isAuth = false;
        authentication.id = "";
        authentication.email = "";
        authentication.roles = [];
    };

    var signUp = function (model, callback) {
        logOut();
        return $http({
            url: "/api/account/register",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(
            function successCallback(response) {
                if (response.data != "Invalid data" && response.data != "Invalid type" && response.data != "Error with registration" && response.data != "Error with adding to role") {
                    $cookies.put("access_token", response.data.email);
                    localStorageService.set("authorizationData", {
                        token: response.access_token,
                        id: response.data.id,
                        email: response.data.email,
                        roles: response.data.roles
                    });
                    authentication.isAuth = true;
                    authentication.id = response.data.id;
                    authentication.email = response.data.email;
                    authentication.roles = response.data.roles;
                    callback("OK");
                } else {
                    callback(response.data);
                }
            }, function errorCallback(error) {
                logOut();
                callback(error);
            }
        );
    };

    var login = function (model, callback) {
        logOut();
        $http({
            url: "/api/account/login",
            dataType: "json",
            method: "POST",
            data: JSON.stringify(model),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(
            function successCallback(response) {
                if (response.data != "Invalid data" && response.data != "Error with login") {
                    $cookies.put("access_token", response.data.email);
                    localStorageService.set("authorizationData", {
                        token: response.access_token,
                        id: response.data.id,
                        email: response.data.email,
                        roles: response.data.roles
                    });
                    authentication.isAuth = true;
                    authentication.id = response.data.id;
                    authentication.email = response.data.email;
                    authentication.roles = response.data.roles;
                    callback("OK");
                } else {
                    callback(response.data);
                }
            }, function errorCallback(error) {
                logOut();
                callback(error);
            }
        );
    };

    var fillAuthData = function () {
        var authData = localStorageService.get("authorizationData");
        var authCookie = $cookies.get("access_token");
        if (authData && authCookie) {
            authentication.isAuth = true;
            authentication.id = authData.id;
            authentication.email = authData.email;
            authentication.roles = authData.roles;
        }
    };

    authServiceFactory.signUp = signUp;
    authServiceFactory.login = login;
    authServiceFactory.logOut = logOut;
    authServiceFactory.fillAuthData = fillAuthData;
    authServiceFactory.authentication = authentication;

    return authServiceFactory;
}
app.factory("consultationService", consultationService);

function consultationService($http) {
    return {
        getConsultationsByTeacher: function (id, callback) {
            $http.get("/api/consultation/byTeacher/" + id)
                .then(
                    function successCallback(response) {
                        callback(response.data);
                    }, function errorCallback(error) {
                        console.error("Problem with getting consultations from the server " + error);
                    }
                );
        },
        createConsultation: function (consultation, callback) {
            $http({
                url: "/api/consultation/createConsultation",
                method: "POST",
                data: JSON.stringify(consultation),
                dataType: "json",
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with creating consultation " + error);
                }
            );
        }
    };
}
app.factory("disciplineService", disciplineService);

function disciplineService($http) {
    var disciplines = [];
    return {
        getDisciplines: function (callback) {
            $http.get("/api/discipline").then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with getting disciplines from the server " + error);
                }
            );
        },
        getDiscipline: function (id, callback) {
            $http.get("/api/discipline/" + id).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with getting discipline by id from the server " + error);
                }
            );
        },
        createDiscipline: function (disciplineName, callback) {
            $http({
                url: "/api/discipline/createDiscipline",
                method: "POST",
                dataType: "json",
                data: JSON.stringify(disciplineName),
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with creating discipline " + error);
                }
            );
        },
        updateDiscipline: function (discipline, callback) {
            $http({
                url: "/api/discipline/updateDiscipline",
                method: "POST",
                data: JSON.stringify(discipline),
                dataType: "json",
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with updating discipline " + error);
                }
            );
        },
        deleteDiscipline: function (id, callback) {
            $http({
                url: "/api/discipline/deleteDiscipline/" + id,
                method: "POST"
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with deleting discipline " + error);
                }
            );
        },
        getTeachersDisciplines: function (teacherId, callback) {
            $http.get("/api/discipline/teachersDisciplines/" + teacherId).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with getting teacher's disciplines from the server" + error);
                }
            );
        }
    };
}
app.factory("documentService", documentService);

function documentService($http) {
    return {
        getDocuments: function (searchParams, callback) {
            $http({
                url: "/api/document",
                method: "GET",
                params: {
                    searchString: searchParams.searchString,
                    skip: searchParams.skip,
                    take: searchParams.take
                }
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with getting documents from the server " + error);
                }
            );
        },
        getDocumentsByTeacher: function (teacherId, callback) {
            $http.get("/api/document/byTeacher/" + teacherId)
                .then(
                    function successCallback(response) {
                        callback(response.data);
                    }, function errorCallback(error) {
                        console.error("Problem with getting teacher's documents from the server " + error);
                    }
                );
        },
        deleteDocument: function (id, callback) {
            $http({
                url: "/api/document/deleteDocument/" + id,
                method: "POST"
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with deleting document " + error);
                }
            );
        }
    };
}
app.factory("groupService", groupService);

function groupService($http) {
    return {
        getGroups: function (callback) {
            $http.get("/api/group")
                .then(
                    function successCallback(response) {
                        callback(response.data);
                    }, function errorCallback(error) {
                        console.error("Problem with getting groups from the server " + error);
                    }
                );
        },
        getGroup: function (id, callback) {
            $http.get("/api/group/" + id)
                .then(
                    function successCallback(response) {
                        callback(response.data);
                    }, function errorCallback(error) {
                        console.error("Problem with getting group by id from the server " + error);
                    }
                );
        },
        createGroup: function (groupName, callback) {
            $http({
                url: "/api/group/createGroup",
                method: "POST",
                dataType: "json",
                data: JSON.stringify(groupName),
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with creating group " + error);
                }
            );
        },
        updateGroup: function (group, callback) {
            $http({
                url: "/api/group/updateGroup",
                method: "POST",
                data: JSON.stringify(group),
                dataType: "json",
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with updating group " + error);
                }
            );
        },
        deleteGroup: function (id, callback) {
            $http({
                url: "/api/group/deleteGroup/" + id,
                method: "POST"
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with deleting group " + error);
                }
            );
        },
        getStudentsGroup: function (studentId, callback) {
            $http.get("/api/group/studentsGroup/" + studentId)
                .then(
                    function successCallback(response) {
                        callback(response.data);
                    }, function errorCallback(error) {
                        console.error("Problem with getting student's group from the server" + error);
                    }
                );
        }
    };
}
app.factory("profileService", profileService);

function profileService($http) {
    return {
        getProfile: function (profileId, callback) {
            $http.get("/api/profile/" + profileId).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with getting profile data from the server" + error);
                }
            );
        }
    };
}
app.factory("userService", userService);

function userService($http) {
    return {
        getUsers: function (searchParams, callback) {
            $http({
                url: "/api/user",
                method: "GET",
                params: {
                    searchString: searchParams.searchString,
                    skip: searchParams.skip,
                    take: searchParams.take
                }
            }).then(
                function successCallback(response) {
                    callback(response.data);
                }, function errorCallback(error) {
                    console.error("Problem with getting users from the server" + error);
                }
            );
        }
    };
}
app.controller("DocumentLoaderController", DocumentLoaderController);

function DocumentLoaderController($scope, $mdDialog, $mdToast, FileUploader) {
    $scope.file = {};

    $scope.uploader = new FileUploader({
        url: '/api/document/uploadDocument',
        onAfterAddingFile: function (item) {
            $scope.file = item._file;
        },
        onSuccessItem: function (item, response) {
            if (response == "Uploaded") {
                $mdToast.show($mdToast.simple()
                    .textContent("Загружено")
                    .position('bottom right')
                    .hideDelay(3000));
            } else if (response == "Error") {
                $mdToast.show($mdToast.simple()
                    .textContent("При загрузке произошла ошибка")
                    .position('bottom right')
                    .hideDelay(3000));
            } else if (response == "Not found") {
                $mdToast.show($mdToast.simple()
                    .textContent("Пользователь не найден")
                    .position('bottom right')
                    .hideDelay(3000));
            }
        },
        onErrorItem: function () {
            $mdToast.show($mdToast.simple()
                .textContent("При загрузке произошла ошибка")
                .position('bottom right')
                .hideDelay(3000));
        }
    });

    $scope.cancel = function () {
        $scope.uploader.clearQueue();
        $mdDialog.cancel();
    };

    $scope.answer = function () {
        $scope.uploader.queue[0].upload();
        $mdDialog.hide($scope.file);
    };
}
app.controller("ProfileImageLoaderController", ProfileImageLoaderController);

function ProfileImageLoaderController($scope, $mdDialog, $mdToast, FileUploader) {
    $scope.imageUrl = '';

    $scope.uploader = new FileUploader({
        url: '/api/image/uploadProfileImage',
        onAfterAddingFile: function (item) {
            $scope.imageUrl = URL.createObjectURL(item._file);
        },
        onSuccessItem: function (item, response) {
            if (response == "Uploaded") {
                $mdToast.show($mdToast.simple().textContent("Загружено").position('bottom right').hideDelay(3000));
            } else if (response == "Invalid file extension") {
                $mdToast.show($mdToast.simple().textContent("Некорректный формат файла").position('bottom right').hideDelay(3000));
            } else {
                $mdToast.show($mdToast.simple().textContent("При загрузке произошла ошибка").position('bottom right').hideDelay(3000));
            }
        },
        onErrorItem: function () {
            $mdToast.show($mdToast.simple().textContent("При загрузке произошла ошибка").position('bottom right').hideDelay(3000));
        }
    });

    $scope.cancel = function () {
        $scope.uploader.clearQueue();
        $mdDialog.cancel();
    };

    $scope.answer = function () {
        $scope.uploader.queue[0].upload();
        $mdDialog.hide($scope.imageUrl);
    };
}